#!/bin/bash

# **********************************************************************
# Pandora FMS PWR Server Daemon
# (c) 2008-2018 Artica ST
#
# Please see http://www.pandorafms.org
# **********************************************************************

### BEGIN INIT INFO
# Provides: pwrd
# Required-Start: $network
# Required-Stop: $network
# Default-Start: 2 3 5
# Default-Stop: 0 1 6
# Short-Description: Startup script daemon for PWR server
# Description: Startup script daemon for PWR server (linux)
### END INIT INFO

# chkconfig:   - 85 1
# description: PWRD Grid is a distributed platform for browser-based automation.
# processname: pwr
# pidfile:     $BASE_DIR/pwr.pid
 
# Source function library.

if [ -e /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi


# **********************************************************************
# Configuration options
# Example node capabilities: -browser browserName=firefox,maxInstances=1,platform=LINUX

# Customize Java binary path
JAVA=/usr/bin/java

# Customize PWR global installation directory
PWR_GLOBAL_DIR=""

# Customize PWR running user
USER=root

# Customize PWR application files directory
PWR_INST_DIR="$PWR_GLOBAL_DIR/opt"

# Customize port for PWR
PWR_PORT=4444
PWR_HUB_PORT=4444
PWR_NODE_PORT=5555

# Extra options for PWR
PWR_OPTS=" -firefoxProfileTemplate $PWR_INST_DIR/firefox_profile "
PWR_NODE_OPTS=" -nodeConfig $PWR_INST_DIR/selenium/config.json "
PWR_HUB_OPTS=""


# **********************************************************************
# Default paths

PWR_DIR="$PWR_GLOBAL_DIR/usr/lib/pwr"
LOG_DIR="$PWR_GLOBAL_DIR/var/log/pwr"
STD_LOG="$LOG_DIR/pwr_std.log"
BASE_DIR="$PWR_GLOBAL_DIR/etc/pwr/tmp"
PWR="$PWR_DIR/selenium-server-standalone-2.53.1.jar"
XVFB_PID_FILE="$BASE_DIR/xvfb.pid"



# **********************************************************************
# Variables

host=`ip a show $(route -n | awk '/^0\.0\.0\.0/ {print $NF}') | grep "inet " | awk '{print $2}' | cut -f1 -d'/' | head -1`



# **********************************************************************
# Functions

# Start Xvfb, required for firefox in server without X
function start_xvfb() {
    `which Xvfb >/dev/null 2>&1`
    if [ $? -ne 0 ]; then
        echo "Xvfb not found, please install it"
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
            echo 1
        fi
    else
        Xvfb :99 -screen 0 1400x768x24 -ac +extension RANDR > $LOG_DIR/xvfb.log 2>&1 & echo $! > $XVFB_PID_FILE
        export DISPLAY=:99
        echo 0
    fi
}

# Stop Xvfb
function stop_xvfb() {
    if test -f $XVFB_PID_FILE ; then
        # Check if there's more instances of pwrd running i.e. standalone + node
        if [ ! -e "$BASE_DIR/pwrd_node.pid" ] && [ ! -e "$BASE_DIR/pwrd.pid" ]; then
            if [ ! -e /etc/rc.d/init.d/functions ]; then
                echo -n "Stopping Xvfb..."
            fi
            PID=$(cat $XVFB_PID_FILE)
            if [ "$PID" != "" ] && [ `kill -9 $PID 2>&1 | grep "No such process" | wc -l` == "1" ]; then
                # PID file exists but no process
                [ -f $XVFB_PID_FILE ] && rm -f $XVFB_PID_FILE
                if [ -e /etc/rc.d/init.d/functions ]; then
                    success
                fi
                return 0
            fi
        else
            [ -e $BASE_DIR/pwrd_node.pid ] && echo -n `cat $BASE_DIR/pwrd_node.pid`
            [ -e $BASE_DIR/pwrd.pid ] && echo -n `cat $BASE_DIR/pwrd.pid`
            echo "pwrd processes left. Skipping Xvfb"
        fi
    fi
}


########################################################################
# START
########################################################################

# Start Selenium Standalone server
function start() {
    if test -f $pid_file; then
        PID=`cat $pid_file`
        if [ "$PID" != "" ] && ps --pid $PID >/dev/null; then
            echo "PWRD is already running: $PID"
            exit 2
        else
            echo "Removing stale pid file: $pid_file"
        fi
    fi

    if [ "`start_xvfb`" != "0" ]; then
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
        fi
        echo "Failed... Check Xvfb"
        return 1
    fi

    if [ ! -e /etc/rc.d/init.d/functions ]; then
        echo -n "Starting PWRD..."
    fi

    export DISPLAY=:99
    PID=$(su $USER -c "$JAVA -jar $PWR -host $host -port $PWR_PORT $PWR_OPTS > $STD_LOG 2>&1 & echo \$!")
    if [ $? == "0" ]; then
        if [ -e /etc/rc.d/init.d/functions ]; then
            success
        fi
        echo "Success"
    else
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
        fi
        echo "Failed"
    fi

    # Store PID
    echo -n $PID > $pid_file

}

# Start Selenium GRID server: HUB component
function start-hub() {
    if test -f $pid_file; then
        PID=`cat $pid_file`
        if [ "$PID" != "" ] && ps --pid $PID >/dev/null; then
            echo "PWRD is already running: $PID"
            exit 2
        else
            echo "Removing stale pid file: $pid_file"
        fi
    fi

    if [ ! -e /etc/rc.d/init.d/functions ]; then
        echo -n "Starting PWRD..."
    fi

    # No Xvfb needed in hub mode

    PID=$(su $USER -c "$JAVA -jar $PWR -host $host -port $PWR_HUB_PORT -role hub $PWR_HUB_OPTS > $STD_LOG 2>&1 & echo \$!")
    if [ $? == "0" ]; then
        if [ -e /etc/rc.d/init.d/functions ]; then
            success
        fi
        echo "Success"
    else
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
        fi
        echo "Failed"
    fi

    # Store PID
    echo -n $PID > $pid_file

    echo
    echo -e "Add nodes to HUB executing:\n  $0 start-node http://$host:$PWR_HUB_PORT/grid/register"
}

# Start Selenium GRID server: Node Connect to hub
function start-node() {
    if test -f $pid_file ; then
        PID=`cat $pid_file`
        if [ "$PID" != "" ] && ps --pid $PID >/dev/null; then
            echo "PWRD is already running: $PID"
            exit 2
        else
            echo "Removing stale pid file: $pid_file"
        fi
    fi

    if [ "`start_xvfb`" != "0" ]; then
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
        fi
        echo "Failed... Check Xvfb"
        return 1
    fi
    
    if [ ! -e /etc/rc.d/init.d/functions ]; then
        echo -n "Starting PWRD..."
    fi

    export DISPLAY=:99
    PID=$(su $USER -c "$JAVA -jar $PWR -host $host -port $PWR_NODE_PORT -role node -hub $1 $PWR_OPTS > $STD_LOG 2>&1 & echo \$!")
    if [ $? == "0" ]; then
        if [ -e /etc/rc.d/init.d/functions ]; then
            success
        fi
        echo "Success"
    else
        if [ -e /etc/rc.d/init.d/functions ]; then
            failure
        fi
        echo "Failed"
    fi

    # Store PID
    echo -n $PID > $pid_file
}


########################################################################
# STOP
########################################################################

# Stop Selenium Standalone server
function stop() {
    if test -f $pid_file ; then
        echo -n "Stopping PWRD..."
        PID=$(cat $pid_file)
        [ "$PID" == "" ] && PID=`ps aux | grep "$JAVA -jar $PWR" | grep -v grep | awk '{print $2}'`
        [ "$PID" != "" ] && su $USER -c "kill -3 $PID"
        [ "$PID" != "" ] && kill -9 $PID >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            sleep 2
            test -f $pid_file && rm -f $pid_file
            if [ -e /etc/rc.d/init.d/functions ]; then
                success
            fi
        else
            echo "PWRD could not be stopped..."
            [ "$PID" == "" ] && [ -f $pid_file ] && rm -f $pid_file
            if [ -e /etc/rc.d/init.d/functions ]; then
                failure
            else
                echo "Failed"
            fi
        fi
        stop_xvfb
    else
        echo "PWRD is not running."
        stop_xvfb
        if [ -e /etc/rc.d/init.d/functions ]; then
            success
        fi
    fi
    echo
}


########################################################################
# STATUS
########################################################################

# Status of Selenium Standalone server
function status() {
    mode=$1
    if test -f $pid_file ; then
    echo "checking: $pid_file"
        PID=`cat $pid_file`
        if [ "$PID" != "" ] && ps --pid $PID >/dev/null ; then
            echo "PWRD$mode is running: $PID"
            if test -f $XVFB_PID_FILE ; then
                PID=`cat $XVFB_PID_FILE`
                if test -f $XVFB_PID_FILE ; then
                    echo "Xvfb is running: $PID"
                fi
            fi
        else
            echo "PWRD$mode isn't running..."
        fi
    else
        echo "PWRD$mode isn't running..."
    fi
}



########################################################################
# MAIN
########################################################################

if [ ! -x "$JAVA" ]; then
    echo "Please verify $JAVA is a valid java" 2>&1
    exit 1
fi

case "$1" in
    start) # Standalone
        pid_file=$BASE_DIR/pwrd.pid
        start
        ;;
    start-hub) # hub
        pid_file=$BASE_DIR/pwrd_hub.pid
        start-hub
        ;;
    start-node) # node
        pid_file=$BASE_DIR/pwrd_node.pid
        start-node $2
        ;;
    stop) # standalone
        pid_file=$BASE_DIR/pwrd.pid
        stop
        ;;
    stop-hub) # hub
        pid_file=$BASE_DIR/pwrd_hub.pid
        stop
        ;;
    stop-node) # node
        pid_file=$BASE_DIR/pwrd_node.pid
        stop
        ;;
    restart) # standalone
        pid_file=$BASE_DIR/pwrd.pid
        stop
        start
        ;;
    restart-hub) # hub
        pid_file=$BASE_DIR/pwrd_hub.pid
        stop
        start-hub
        ;;
    restart-node) # node
        pid_file=$BASE_DIR/pwrd_node.pid
        stop
        start-node $2
        ;;
    status)
        pid_file=$BASE_DIR/pwrd.pid
        status ""
        pid_file=$BASE_DIR/pwrd_hub.pid
        status " HUB"
        pid_file=$BASE_DIR/pwrd_node.pid
        status " Node"
        ;;
    *)
        echo "Usage: $SELF start*|stop*|restart*|status"
        echo "    start* (standalone, hub or node)"
        echo "      start"
        echo "      start-hub"
        echo "      start-node http://hub:4444/grid/register"
        echo "    stop* (standalone, hub or node)"
        echo "      stop"
        echo "      stop-hub"
        echo "      stop-node"
        echo "    restart* (standalone, hub or node)"
        echo "      restart"
        echo "      restart-hub"
        echo "      restart-node http://hub:4444/grid/register"
        exit 9
        ;;
esac
